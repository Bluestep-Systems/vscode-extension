# ============================================================================
# VS Code Extension Release Workflow
# ============================================================================
# Purpose: Automated CI/CD pipeline for building, testing, and releasing
#          VS Code extensions when version tags are pushed
#
# Triggers: Push of tags matching pattern v*.*.*
#
# Architecture:
#   - Multi-job pipeline with dependency management
#   - Cross-platform testing matrix
#   - Artifact signing and attestation
#   - Intelligent caching and parallelization
#   - Comprehensive error handling and recovery
# ============================================================================

name: Build and Release VSIX

# Trigger on semantic version tags
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'  # Matches v1.0.0, v1.0.0-beta.1, etc.

# ============================================================================
# PERMISSIONS
# Using principle of least privilege - each job declares its own permissions
# ============================================================================
permissions:
  contents: read  # Default read-only

# ============================================================================
# CONCURRENCY
# Prevent multiple releases for the same tag from running simultaneously
# ============================================================================
concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel releases in progress

# ============================================================================
# ENVIRONMENT VARIABLES
# ============================================================================
env:
  NODE_VERSION: '20'
  ARTIFACT_RETENTION_DAYS: 30
  VSIX_ARTIFACT_NAME: vsix-package
  # Security: Use commit SHAs instead of version tags for actions
  ACTIONS_CHECKOUT_SHA: 'b4ffde65f46336ab88eb53be808477a3936bae11'  # v4.1.1
  ACTIONS_SETUP_NODE_SHA: '60edb5dd545a775178f52524783378180af0d1f8'  # v4.0.2
  ACTIONS_UPLOAD_ARTIFACT_SHA: '5d5d22a31266ced268874388b861e4b58bb5c2f3'  # v4.3.1
  ACTIONS_DOWNLOAD_ARTIFACT_SHA: 'c850b930e6ba138125429b7e5c93fc707a7f8427'  # v4.1.4
  SOFTPROPS_RELEASE_SHA: '6da8fa9354ddfdc4aeace5fc48d7f679b5214090'  # v2.4.1

# ============================================================================
# JOBS
# ============================================================================
jobs:
  # ==========================================================================
  # JOB: Validate
  # Purpose: Run comprehensive tests across multiple platforms
  # ==========================================================================
  validate:
    name: Validate (${{ matrix.os }}, Node ${{ matrix.node }})
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false  # Continue testing on other platforms even if one fails
      matrix:
        os: [windows-latest, macos-latest]
        node: ['20']  

    outputs:
      tests-passed: ${{ steps.test-status.outputs.passed }}

    steps:
      # ----------------------------------------------------------------------
      # Checkout code with full history for proper version detection
      # ----------------------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11  # v4.1.1
        with:
          fetch-depth: 0  # Full history for changelog generation
          persist-credentials: false  # Security: Don't persist auth token

      # ----------------------------------------------------------------------
      # Setup Node.js with intelligent caching
      # ----------------------------------------------------------------------
      - name: Setup Node.js ${{ matrix.node }}
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8  # v4.0.2
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      # ----------------------------------------------------------------------
      # Cache node_modules for faster installs
      # ----------------------------------------------------------------------
      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ matrix.node }}-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node }}-modules-

      # ----------------------------------------------------------------------
      # Install dependencies with retry logic for network issues
      # ----------------------------------------------------------------------
      - name: Install dependencies
        run: |
          for i in 1 2 3; do
            npm ci --prefer-offline --no-audit && break
            echo "Attempt $i failed, retrying..."
            sleep 5
          done
        shell: bash

      # ----------------------------------------------------------------------
      # Type checking
      # ----------------------------------------------------------------------
      - name: Type check
        run: npm run check-types

      # ----------------------------------------------------------------------
      # Linting with problem matchers
      # ----------------------------------------------------------------------
      - name: Lint code
        run: npm run lint

      # ----------------------------------------------------------------------
      # Run tests with coverage reporting
      # ----------------------------------------------------------------------
      - name: Run tests
        id: run-tests
        run: npm test
        continue-on-error: true  # Capture test failures for reporting

      # ----------------------------------------------------------------------
      # Set test status output
      # ----------------------------------------------------------------------
      - name: Set test status
        id: test-status
        run: |
          if [ "${{ steps.run-tests.outcome }}" == "success" ]; then
            echo "passed=true" >> $GITHUB_OUTPUT
          else
            echo "passed=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      # ----------------------------------------------------------------------
      # Upload test results for debugging
      # ----------------------------------------------------------------------
      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3  # v4.3.1
        with:
          name: test-results-${{ matrix.os }}-node${{ matrix.node }}
          path: |
            test-results/
            coverage/
          retention-days: 7

  # ==========================================================================
  # JOB: Build
  # Purpose: Build the VSIX package with integrity checks
  # ==========================================================================
  build:
    name: Build VSIX Package
    runs-on: ubuntu-latest
    needs: validate

    # Only build if all tests pass
    if: needs.validate.outputs.tests-passed == 'true'

    permissions:
      contents: read
      id-token: write  # For artifact attestation
      attestations: write  # For creating attestations

    outputs:
      vsix-file: ${{ steps.package-info.outputs.vsix-file }}
      vsix-sha256: ${{ steps.package-info.outputs.vsix-sha256 }}
      version: ${{ steps.package-info.outputs.version }}
      release-notes: ${{ steps.release-notes.outputs.notes }}
      is-prerelease: ${{ steps.version-check.outputs.is-prerelease }}

    steps:
      # ----------------------------------------------------------------------
      # Checkout code
      # ----------------------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11  # v4.1.1
        with:
          fetch-depth: 0
          persist-credentials: false

      # ----------------------------------------------------------------------
      # Setup build environment
      # ----------------------------------------------------------------------
      - name: Setup Node.js
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8  # v4.0.2
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # ----------------------------------------------------------------------
      # Restore cached dependencies
      # ----------------------------------------------------------------------
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-modules-

      # ----------------------------------------------------------------------
      # Install dependencies
      # ----------------------------------------------------------------------
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      # ----------------------------------------------------------------------
      # Build the VSIX package
      # ----------------------------------------------------------------------
      - name: Build VSIX package
        run: |
          set -euo pipefail
          npm run package-extension

          # Verify VSIX file was created
          VSIX_COUNT=$(find . -maxdepth 1 -name "bsjs-push-pull-*.vsix" -type f | wc -l)
          if [ "$VSIX_COUNT" -eq 0 ]; then
            echo "::error::No VSIX file was created"
            exit 1
          elif [ "$VSIX_COUNT" -gt 1 ]; then
            echo "::error::Multiple VSIX files found, expected exactly 1"
            exit 1
          fi

      # ----------------------------------------------------------------------
      # Extract package information and generate checksums
      # ----------------------------------------------------------------------
      - name: Extract package information
        id: package-info
        run: |
          set -euo pipefail

          # Find the VSIX file
          VSIX_FILE=$(find . -maxdepth 1 -name "bsjs-push-pull-*.vsix" -type f)
          echo "vsix-file=$(basename "$VSIX_FILE")" >> $GITHUB_OUTPUT

          # Generate SHA256 checksum
          SHA256=$(sha256sum "$VSIX_FILE" | cut -d' ' -f1)
          echo "vsix-sha256=$SHA256" >> $GITHUB_OUTPUT

          # Extract version from tag
          VERSION="${GITHUB_REF#refs/tags/v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Log for debugging
          echo "::notice::Built $(basename "$VSIX_FILE") (SHA256: $SHA256)"

      # ----------------------------------------------------------------------
      # Verify VSIX integrity
      # ----------------------------------------------------------------------
      - name: Verify VSIX integrity
        run: |
          set -euo pipefail

          VSIX_FILE="${{ steps.package-info.outputs.vsix-file }}"

          # Verify it's a valid ZIP file
          if ! unzip -t "$VSIX_FILE" > /dev/null 2>&1; then
            echo "::error::VSIX file is not a valid ZIP archive"
            exit 1
          fi

          # Check for required files in the archive
          REQUIRED_FILES=("extension/package.json" "extension/dist/")
          for file in "${REQUIRED_FILES[@]}"; do
            if ! unzip -l "$VSIX_FILE" | grep -q "$file"; then
              echo "::error::Required file/directory '$file' not found in VSIX"
              exit 1
            fi
          done

          echo "::notice::VSIX integrity check passed"

      # ----------------------------------------------------------------------
      # Check version consistency
      # ----------------------------------------------------------------------
      - name: Verify version consistency
        run: |
          set -euo pipefail

          # Extract version from package.json
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          TAG_VERSION="${{ steps.package-info.outputs.version }}"

          if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
            echo "::warning::Version mismatch: package.json=$PACKAGE_VERSION, tag=$TAG_VERSION"
          fi

      # ----------------------------------------------------------------------
      # Determine release type
      # ----------------------------------------------------------------------
      - name: Check pre-release status
        id: version-check
        run: |
          VERSION="${{ steps.package-info.outputs.version }}"
          if [[ "$VERSION" =~ (alpha|beta|rc|preview|dev) ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
            echo "::notice::Pre-release detected: $VERSION"
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          fi

      # ----------------------------------------------------------------------
      # Generate release notes
      # ----------------------------------------------------------------------
      - name: Generate release notes
        id: release-notes
        run: |
          set -euo pipefail

          # Find previous release tag
          CURRENT_TAG="${GITHUB_REF#refs/tags/}"
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 "$CURRENT_TAG^" 2>/dev/null || echo "")

          # Generate notes based on commit history
          {
            echo "notes<<EOF"

            if [ -z "$PREVIOUS_TAG" ]; then
              echo "🎉 Initial release!"
            else
              echo "## What's Changed"
              echo ""

              # Group commits by conventional commit type
              declare -A commit_types=(
                ["feat"]="✨ Features"
                ["fix"]="🐛 Bug Fixes"
                ["docs"]="📚 Documentation"
                ["test"]="🧪 Tests"
                ["refactor"]="♻️ Refactoring"
                ["perf"]="⚡ Performance"
                ["chore"]="🔧 Maintenance"
              )

              for type in feat fix docs test refactor perf chore; do
                commits=$(git log "$PREVIOUS_TAG..$CURRENT_TAG" --pretty=format:"- %s (%h)" --grep="^$type" --no-merges)
                if [ -n "$commits" ]; then
                  echo "### ${commit_types[$type]}"
                  echo "$commits"
                  echo ""
                fi
              done

              # Other commits
              other_commits=$(git log "$PREVIOUS_TAG..$CURRENT_TAG" --pretty=format:"- %s (%h)" --no-merges | \
                grep -vE "^- (feat|fix|docs|test|refactor|perf|chore)")
              if [ -n "$other_commits" ]; then
                echo "### 📦 Other Changes"
                echo "$other_commits"
                echo ""
              fi

              echo "**Full Changelog**: ${{ github.server_url }}/${{ github.repository }}/compare/$PREVIOUS_TAG...$CURRENT_TAG"
            fi

            echo "EOF"
          } >> $GITHUB_OUTPUT

      # ----------------------------------------------------------------------
      # Create artifact attestation for supply chain security
      # ----------------------------------------------------------------------
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: ${{ steps.package-info.outputs.vsix-file }}

      # ----------------------------------------------------------------------
      # Upload VSIX as artifact
      # ----------------------------------------------------------------------
      - name: Upload VSIX artifact
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3  # v4.3.1
        with:
          name: ${{ env.VSIX_ARTIFACT_NAME }}
          path: ${{ steps.package-info.outputs.vsix-file }}
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          if-no-files-found: error

      # ----------------------------------------------------------------------
      # Create checksum file
      # ----------------------------------------------------------------------
      - name: Create checksum file
        run: |
          echo "${{ steps.package-info.outputs.vsix-sha256 }}  ${{ steps.package-info.outputs.vsix-file }}" > checksums.txt

      # ----------------------------------------------------------------------
      # Upload checksums
      # ----------------------------------------------------------------------
      - name: Upload checksums
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3  # v4.3.1
        with:
          name: checksums
          path: checksums.txt
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  # ==========================================================================
  # JOB: Release
  # Purpose: Create GitHub release and attach artifacts
  # ==========================================================================
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build

    # Required for creating releases
    permissions:
      contents: write
      id-token: write  # For signing
      attestations: write  # For attestations

    # Ensure release creation is idempotent
    environment:
      name: production
      url: ${{ steps.create-release.outputs.url }}

    steps:
      # ----------------------------------------------------------------------
      # Checkout for release creation
      # ----------------------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11  # v4.1.1
        with:
          persist-credentials: false

      # ----------------------------------------------------------------------
      # Download built artifacts
      # ----------------------------------------------------------------------
      - name: Download VSIX artifact
        uses: actions/download-artifact@c850b930e6ba138125429b7e5c93fc707a7f8427  # v4.1.4
        with:
          name: ${{ env.VSIX_ARTIFACT_NAME }}

      - name: Download checksums
        uses: actions/download-artifact@c850b930e6ba138125429b7e5c93fc707a7f8427  # v4.1.4
        with:
          name: checksums

      # ----------------------------------------------------------------------
      # Verify downloaded artifacts
      # ----------------------------------------------------------------------
      - name: Verify artifacts
        run: |
          set -euo pipefail

          # Verify checksum
          if ! sha256sum -c checksums.txt; then
            echo "::error::Checksum verification failed"
            exit 1
          fi

          echo "::notice::Artifact verification successful"

      # ----------------------------------------------------------------------
      # Check if release already exists (idempotency)
      # ----------------------------------------------------------------------
      - name: Check existing release
        id: check-release
        run: |
          set -euo pipefail

          TAG="${GITHUB_REF#refs/tags/}"

          # Use GitHub CLI to check for existing release
          if gh release view "$TAG" --repo "${{ github.repository }}" > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "::warning::Release $TAG already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ----------------------------------------------------------------------
      # Create release (if not exists)
      # ----------------------------------------------------------------------
      - name: Create GitHub Release
        id: create-release
        if: steps.check-release.outputs.exists == 'false'
        uses: softprops/action-gh-release@6da8fa9354ddfdc4aeace5fc48d7f679b5214090  # v2.4.1
        with:
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          body: |
            # Release ${{ github.ref_name }}

            ${{ needs.build.outputs.release-notes }}

            ## 📦 Installation Instructions

            ### Option 1: Install from VSIX file
            1. Download the `.vsix` file from the assets below
            2. Open VS Code
            3. Open the Command Palette (Ctrl+Shift+P / Cmd+Shift+P)
            4. Type "Install from VSIX" and select the command
            5. Browse to the downloaded `.vsix` file and select it

            ### Option 2: Command line installation
            ```bash
            code --install-extension ${{ needs.build.outputs.vsix-file }}
            ```

            ## 🔐 Verification

            SHA256 checksum: `${{ needs.build.outputs.vsix-sha256 }}`

            To verify the downloaded file:
            ```bash
            sha256sum ${{ needs.build.outputs.vsix-file }}
            ```

            ---

            _This release was automatically generated by [GitHub Actions](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})_
          files: |
            ${{ needs.build.outputs.vsix-file }}
            checksums.txt
          prerelease: ${{ needs.build.outputs.is-prerelease }}
          draft: false
          fail_on_unmatched_files: true
          generate_release_notes: false  # We generate our own
          token: ${{ secrets.GITHUB_TOKEN }}

      # ----------------------------------------------------------------------
      # Update existing release (if exists)
      # ----------------------------------------------------------------------
      - name: Update existing release
        if: steps.check-release.outputs.exists == 'true'
        run: |
          set -euo pipefail

          TAG="${GITHUB_REF#refs/tags/}"

          # Upload assets to existing release
          gh release upload "$TAG" \
            "${{ needs.build.outputs.vsix-file }}" \
            checksums.txt \
            --repo "${{ github.repository }}" \
            --clobber

          echo "::notice::Updated existing release with new artifacts"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # # ==========================================================================
  # # JOB: Notify
  # # Purpose: Send notifications about release status (optional)
  # # ==========================================================================
  # notify:
  #   name: Send Notifications
  #   runs-on: ubuntu-latest
  #   needs: [validate, build, release]
  #   if: always()  # Run even if previous jobs fail

  #   permissions:
  #     contents: read

  #   steps:
  #     # ----------------------------------------------------------------------
  #     # Determine overall status
  #     # ----------------------------------------------------------------------
  #     - name: Determine release status
  #       id: status
  #       run: |
  #         if [ "${{ needs.release.result }}" == "success" ]; then
  #           echo "status=✅ Release successful" >> $GITHUB_OUTPUT
  #           echo "color=good" >> $GITHUB_OUTPUT
  #         elif [ "${{ needs.build.result }}" == "failure" ]; then
  #           echo "status=❌ Build failed" >> $GITHUB_OUTPUT
  #           echo "color=danger" >> $GITHUB_OUTPUT
  #         elif [ "${{ needs.validate.result }}" == "failure" ]; then
  #           echo "status=❌ Tests failed" >> $GITHUB_OUTPUT
  #           echo "color=danger" >> $GITHUB_OUTPUT
  #         else
  #           echo "status=⚠️ Release incomplete" >> $GITHUB_OUTPUT
  #           echo "color=warning" >> $GITHUB_OUTPUT
  #         fi

  #     # ----------------------------------------------------------------------
  #     # Create summary
  #     # ----------------------------------------------------------------------
  #     - name: Create job summary
  #       run: |
  #         cat >> $GITHUB_STEP_SUMMARY << 'EOF'
  #         # Release Summary for ${{ github.ref_name }}

  #         ## Status: ${{ steps.status.outputs.status }}

  #         | Stage | Result |
  #         |-------|--------|
  #         | Tests | ${{ needs.validate.result }} |
  #         | Build | ${{ needs.build.result }} |
  #         | Release | ${{ needs.release.result }} |

  #         ### Build Details
  #         - Version: `${{ needs.build.outputs.version }}`
  #         - Pre-release: ${{ needs.build.outputs.is-prerelease }}
  #         - SHA256: `${{ needs.build.outputs.vsix-sha256 }}`

  #         ### Links
  #         - [Release Page](${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }})
  #         - [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
  #         EOF

  #     # Add webhook notifications, Slack, Discord, etc. here if needed